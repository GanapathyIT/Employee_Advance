#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Aug 18, 2020 03:02:37 PM IST  platform: Windows NT

import sys
from tkcalendar import *

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import advance_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Bio (root)
    advance_support.init(root, top)
    root.mainloop()

w = None
def create_Bio(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Bio(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Bio (w)
    advance_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Bio():
    global w
    w.destroy()
    w = None

class Bio:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1355x815")
        top.minsize(120, 2)
        top.maxsize(1924, 1065)
        top.resizable(1, 1)
        top.title("VSA")
        top.configure(relief="raised")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.c1 = tk.Canvas(top)
        self.c1.place(relx=0.024, rely=0.177, relheight=0.794, relwidth=0.761)
        self.c1.configure(background="#ffffff")
        self.c1.configure(borderwidth="2")
        self.c1.configure(highlightbackground="#c0c0c0")
        self.c1.configure(highlightcolor="black")
        self.c1.configure(insertbackground="black")
        self.c1.configure(relief="ridge")
        self.c1.configure(selectbackground="blue")
        self.c1.configure(selectforeground="white")

        self.l2_11 = tk.Label(self.c1)
        self.l2_11.place(relx=0.045, rely=0.093, height=54, width=168)
        self.l2_11.configure(activebackground="#f9f9f9")
        self.l2_11.configure(activeforeground="black")
        self.l2_11.configure(background="#ffffff")
        self.l2_11.configure(disabledforeground="#a3a3a3")
        self.l2_11.configure(font="-family {Segoe UI} -size 15 -weight normal -slant roman -underline 0 -overstrike 0")
        self.l2_11.configure(foreground="#000000")
        self.l2_11.configure(highlightbackground="#d9d9d9")
        self.l2_11.configure(highlightcolor="black")
        self.l2_11.configure(text='''Enter the Name''')

        self.name = tk.Entry(self.c1)
        self.name.place(relx=0.213, rely=0.093,height=40, relwidth=0.256)
        self.name.configure(background="white")
        self.name.configure(disabledforeground="#a3a3a3")
        self.name.configure(font="-family {Courier New} -size 15 -weight normal -slant roman -underline 0 -overstrike 0")
        self.name.configure(foreground="#000000")
        self.name.configure(highlightbackground="#d9d9d9")
        self.name.configure(highlightcolor="black")
        self.name.configure(insertbackground="black")
        self.name.configure(selectbackground="blue")
        self.name.configure(selectforeground="white")

        self.l2_2 = tk.Label(self.c1)
        self.l2_2.place(relx=0.51, rely=0.093, height=54, width=152)
        self.l2_2.configure(activebackground="#f9f9f9")
        self.l2_2.configure(activeforeground="black")
        self.l2_2.configure(background="#ffffff")
        self.l2_2.configure(disabledforeground="#a3a3a3")
        self.l2_2.configure(font="-family {Segoe UI} -size 15 -weight normal -slant roman -underline 0 -overstrike 0")
        self.l2_2.configure(foreground="#000000")
        self.l2_2.configure(highlightbackground="#d9d9d9")
        self.l2_2.configure(highlightcolor="black")
        self.l2_2.configure(text='''Select the Date''')

        self.l2_5 = tk.Label(self.c1)
        self.l2_5.place(relx=0.019, rely=0.232, height=54, width=180)
        self.l2_5.configure(activebackground="#f9f9f9")
        self.l2_5.configure(activeforeground="black")
        self.l2_5.configure(background="#ffffff")
        self.l2_5.configure(disabledforeground="#a3a3a3")
        self.l2_5.configure(font="-family {Segoe UI} -size 15 -weight normal -slant roman -underline 0 -overstrike 0")
        self.l2_5.configure(foreground="#000000")
        self.l2_5.configure(highlightbackground="#d9d9d9")
        self.l2_5.configure(highlightcolor="black")
        self.l2_5.configure(text='''Enter the Site Name''')

        self.site = tk.Entry(self.c1)
        self.site.place(relx=0.213, rely=0.233,height=40, relwidth=0.256)
        self.site.configure(background="white")
        self.site.configure(disabledforeground="#a3a3a3")
        self.site.configure(font="-family {Courier New} -size 15 -weight normal -slant roman -underline 0 -overstrike 0")
        self.site.configure(foreground="#000000")
        self.site.configure(highlightbackground="#d9d9d9")
        self.site.configure(highlightcolor="black")
        self.site.configure(insertbackground="black")
        self.site.configure(selectbackground="blue")
        self.site.configure(selectforeground="white")

        self.l2_7 = tk.Label(self.c1)
        self.l2_7.place(relx=0.048, rely=0.371, height=54, width=144)
        self.l2_7.configure(activebackground="#f9f9f9")
        self.l2_7.configure(activeforeground="black")
        self.l2_7.configure(background="#ffffff")
        self.l2_7.configure(disabledforeground="#a3a3a3")
        self.l2_7.configure(font="-family {Segoe UI} -size 15 -weight normal -slant roman -underline 0 -overstrike 0")
        self.l2_7.configure(foreground="#000000")
        self.l2_7.configure(highlightbackground="#d9d9d9")
        self.l2_7.configure(highlightcolor="black")
        self.l2_7.configure(text='''Enter Amount''')

        self.amount = tk.Entry(self.c1)
        self.amount.place(relx=0.213, rely=0.385,height=40, relwidth=0.256)
        self.amount.configure(background="white")
        self.amount.configure(disabledforeground="#a3a3a3")
        self.amount.configure(font="-family {Courier New} -size 15 -weight normal -slant roman -underline 0 -overstrike 0")
        self.amount.configure(foreground="#000000")
        self.amount.configure(highlightbackground="#d9d9d9")
        self.amount.configure(highlightcolor="black")
        self.amount.configure(insertbackground="black")
        self.amount.configure(selectbackground="blue")
        self.amount.configure(selectforeground="white")

        self.l2_1 = tk.Label(self.c1)
        self.l2_1.place(relx=0.048, rely=0.526, height=55, width=144)
        self.l2_1.configure(activebackground="#f9f9f9")
        self.l2_1.configure(activeforeground="black")
        self.l2_1.configure(background="#ffffff")
        self.l2_1.configure(disabledforeground="#a3a3a3")
        self.l2_1.configure(font="-family {Segoe UI} -size 15 -weight normal -slant roman -underline 0 -overstrike 0")
        self.l2_1.configure(foreground="#000000")
        self.l2_1.configure(highlightbackground="#d9d9d9")
        self.l2_1.configure(highlightcolor="black")
        self.l2_1.configure(text='''Enter Reason''')

        self.reason = tk.Entry(self.c1)
        self.reason.place(relx=0.213, rely=0.522,height=40, relwidth=0.256)
        self.reason.configure(background="white")
        self.reason.configure(disabledforeground="#a3a3a3")
        self.reason.configure(font="-family {Courier New} -size 15 -weight normal -slant roman -underline 0 -overstrike 0")
        self.reason.configure(foreground="#000000")
        self.reason.configure(highlightbackground="#d9d9d9")
        self.reason.configure(highlightcolor="black")
        self.reason.configure(insertbackground="black")
        self.reason.configure(selectbackground="blue")
        self.reason.configure(selectforeground="white")

        self.back = tk.Button(self.c1)
        self.back.place(relx=0.627, rely=0.72, height=54, width=167)
        self.back.configure(activebackground="#ececec")
        self.back.configure(activeforeground="#000000")
        self.back.configure(background="#d9d9d9")
        self.back.configure(disabledforeground="#a3a3a3")
        self.back.configure(foreground="#000000")
        self.back.configure(highlightbackground="#d9d9d9")
        self.back.configure(highlightcolor="black")
        self.back.configure(pady="0")
        self.back.configure(text='''Back''')
        self.back.bind('<Button-1>',lambda e:advance_support.menu(e))

        self.refresh = tk.Button(self.c1)
        self.refresh.place(relx=0.036, rely=0.74, height=34, width=87)
        self.refresh.configure(activebackground="#ececec")
        self.refresh.configure(activeforeground="#000000")
        self.refresh.configure(background="#d9d9d9")
        self.refresh.configure(disabledforeground="#a3a3a3")
        self.refresh.configure(foreground="#000000")
        self.refresh.configure(highlightbackground="#d9d9d9")
        self.refresh.configure(highlightcolor="black")
        self.refresh.configure(pady="0")
        self.refresh.configure(text='''Refresh''')
        self.refresh.bind('<Button-1>',lambda e:advance_support.refresh(e))

        self.submit = tk.Button(self.c1)
        self.submit.place(relx=0.273, rely=0.72, height=74, width=207)
        self.submit.configure(activebackground="#ececec")
        self.submit.configure(activeforeground="#000000")
        self.submit.configure(background="#d9d9d9")
        self.submit.configure(disabledforeground="#a3a3a3")
        self.submit.configure(foreground="#000000")
        self.submit.configure(highlightbackground="#d9d9d9")
        self.submit.configure(highlightcolor="black")
        self.submit.configure(pady="0")
        self.submit.configure(text='''Submit''')
        self.submit.bind('<Button-1>',lambda e:advance_support.submit(e))

        self.select = tk.Button(self.c1)
        self.select.place(relx=0.874, rely=0.338, height=34, width=87)
        self.select.configure(activebackground="#ececec")
        self.select.configure(activeforeground="#000000")
        self.select.configure(background="#d9d9d9")
        self.select.configure(disabledforeground="#a3a3a3")
        self.select.configure(foreground="#000000")
        self.select.configure(highlightbackground="#d9d9d9")
        self.select.configure(highlightcolor="black")
        self.select.configure(pady="0")
        self.select.configure(text='''Select''')
        self.select.bind('<Button-1>',lambda e:advance_support.select(e))

        self.Cal = Calendar(self.c1, selectmode = "day",date_pattern ="y-mm-dd")
        self.Cal.place(relx=0.537, rely=0.219, relheight=0.428, relwidth=0.292)

        self.date = tk.Label(self.c1)
        self.date.place(relx=0.719, rely=0.083, height=54, width=153)
        self.date.configure(activebackground="#f9f9f9")
        self.date.configure(activeforeground="black")
        self.date.configure(background="#ffffff")
        self.date.configure(disabledforeground="#a3a3a3")
        self.date.configure(font="-family {Segoe UI} -size 15 -weight normal -slant roman -underline 0 -overstrike 0")
        self.date.configure(foreground="#000000")
        self.date.configure(highlightbackground="#d9d9d9")
        self.date.configure(highlightcolor="black")
        self.date.configure(relief="raised")

        self.l1 = tk.Label(top)
        self.l1.place(relx=0.258, rely=0.061, height=71, width=653)
        self.l1.configure(activebackground="#f9f9f9")
        self.l1.configure(activeforeground="black")
        self.l1.configure(background="#d9d9d9")
        self.l1.configure(disabledforeground="#a3a3a3")
        self.l1.configure(font="-family {Segoe UI} -size 20 -weight bold -slant roman -underline 0 -overstrike 0")
        self.l1.configure(foreground="#000000")
        self.l1.configure(highlightbackground="#d9d9d9")
        self.l1.configure(highlightcolor="black")
        self.l1.configure(text='''Advance Entry''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.namelist_button = tk.Button(top)
        self.namelist_button.place(relx=0.804, rely=0.198, height=54, width=217)
        self.namelist_button.configure(activebackground="#ececec")
        self.namelist_button.configure(activeforeground="#000000")
        self.namelist_button.configure(background="#808080")
        self.namelist_button.configure(disabledforeground="#a3a3a3")
        self.namelist_button.configure(font="-family {Segoe UI Black} -size 12 -weight bold -slant roman -underline 0 -overstrike 0")
        self.namelist_button.configure(foreground="#ffffff")
        self.namelist_button.configure(highlightbackground="#d9d9d9")
        self.namelist_button.configure(highlightcolor="black")
        self.namelist_button.configure(overrelief="raised")
        self.namelist_button.configure(pady="0")
        self.namelist_button.configure(repeatdelay="20")
        self.namelist_button.configure(repeatinterval="20")
        self.namelist_button.configure(text='''Check Names''')
        self.namelist_button.bind('<Button-1>',lambda e:advance_support.namelist(e))

        self.namelist_view = ScrolledListBox(top)
        self.namelist_view.place(relx=0.797, rely=0.27, relheight=0.694
                , relwidth=0.179)
        self.namelist_view.configure(background="white")
        self.namelist_view.configure(cursor="xterm")
        self.namelist_view.configure(disabledforeground="#a3a3a3")
        self.namelist_view.configure(font="TkFixedFont")
        self.namelist_view.configure(foreground="black")
        self.namelist_view.configure(highlightbackground="#d9d9d9")
        self.namelist_view.configure(highlightcolor="#d9d9d9")
        self.namelist_view.configure(selectbackground="blue")
        self.namelist_view.configure(selectforeground="white")

        self.search = tk.Button(top)
        self.search.place(relx=0.849, rely=0.11, height=34, width=117)
        self.search.configure(activebackground="#ececec")
        self.search.configure(activeforeground="#000000")
        self.search.configure(background="#d9d9d9")
        self.search.configure(disabledforeground="#a3a3a3")
        self.search.configure(foreground="#000000")
        self.search.configure(highlightbackground="#d9d9d9")
        self.search.configure(highlightcolor="black")
        self.search.configure(pady="0")
        self.search.configure(text='''Search''')
        self.search.bind('<Button-1>',lambda e:advance_support.search(e))

        self.seaech_name = tk.Entry(top)
        self.seaech_name.place(relx=0.819, rely=0.049, height=40, relwidth=0.143)
        self.seaech_name.configure(background="white")
        self.seaech_name.configure(disabledforeground="#a3a3a3")
        self.seaech_name.configure(font="-family {Courier New} -size 15 -weight normal -slant roman -underline 0 -overstrike 0")
        self.seaech_name.configure(foreground="#000000")
        self.seaech_name.configure(insertbackground="black")


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





